-- Nebula Debugger - Ultra Advanced Version
-- Enhanced debugging, adaptive anticheat bypass, smart logging, and admin detection

local Rayfield = (function()
    local success, RayfieldModule = pcall(function()
        return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
    end)
    if success and RayfieldModule then
        return RayfieldModule
    else
        error("Failed to load Rayfield UI")
    end
end)()

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")

-- Helpers
local function notify(text)
    Rayfield:Notify({Title = "Nebula Debugger", Content = text, Duration = 4})
end

local function safePcall(fn, ...)
    local ok, res = pcall(fn, ...)
    if ok then return res end
    return nil
end

-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "Nebula Debugger",
    LoadingTitle = "Nebula Debugger",
    SubText = "Purple | Gold | White Theme - Ultra Advanced",
    Theme = {
        Accent = Color3.fromRGB(156, 0, 255),
        Outline = Color3.fromRGB(255, 215, 0),
        TextColor = Color3.fromRGB(255, 255, 255),
        Background = Color3.fromRGB(20, 20, 20),
    },
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "NebulaDebugger",
        FileName = "Settings"
    },
    KeySystem = false,
    Discord = { Enabled = false }
})

local LocalPlayerTab = Window:CreateTab("👤 Local Player")
local DebuggerTab = Window:CreateTab("🐞 Debugger")

-----------------------------
-- Local Player Tab (Same as before) --
-----------------------------
local WalkSpeedValue = 16
local JumpPowerValue = 50

local walkSpeedToggle = LocalPlayerTab:CreateToggle({
    Name = "Enable WalkSpeed",
    CurrentValue = false,
    Flag = "WalkSpeedToggle",
    Callback = function(enabled)
        if enabled then
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.WalkSpeed = WalkSpeedValue end
            end
        else
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.WalkSpeed = 16 end
            end
        end
    end
})

local speedSlider = LocalPlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 250},
    Increment = 1,
    CurrentValue = WalkSpeedValue,
    Flag = "WalkSpeedSlider",
    Callback = function(value)
        WalkSpeedValue = value
        if walkSpeedToggle:GetValue() then
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.WalkSpeed = WalkSpeedValue end
            end
        end
    end
})

local jumpPowerToggle = LocalPlayerTab:CreateToggle({
    Name = "Enable Jump Power",
    CurrentValue = false,
    Flag = "JumpPowerToggle",
    Callback = function(enabled)
        if enabled then
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.UseJumpPower = true
                    humanoid.JumpPower = JumpPowerValue
                end
            end
        else
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.JumpPower = 50 end
            end
        end
    end
})

local jumpSlider = LocalPlayerTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 250},
    Increment = 1,
    CurrentValue = JumpPowerValue,
    Flag = "JumpPowerSlider",
    Callback = function(value)
        JumpPowerValue = value
        if jumpPowerToggle:GetValue() then
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.UseJumpPower = true
                    humanoid.JumpPower = JumpPowerValue
                end
            end
        end
    end
})

LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")
    if walkSpeedToggle:GetValue() then
        char.Humanoid.WalkSpeed = WalkSpeedValue
    end
    if jumpPowerToggle:GetValue() then
        char.Humanoid.UseJumpPower = true
        char.Humanoid.JumpPower = JumpPowerValue
    end
end)

-----------------------------
-- Debugger Tab Advanced Features --
-----------------------------

local anticheatBypassEnabled = false
local kickHooked = false
local positionRestoreConnection = nil
local originalPosition = nil
local remoteLoggerConnection = nil
local autoRespawnEnabled = false
local commandLoggerEnabled = false
local infJumpDebugEnabled = false
local chatLoggerConnection = nil

-- Advanced Anticheat Bypass --
local function hookKick()
    if kickHooked then return end
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local oldNamecall = mt.__namecall
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}

        -- Block forced kick attempts dynamically
        if method == "Kick" or method == "kick" then
            notify("[AntiKick] Blocked kick attempt.")
            return wait(9e9)
        end

        -- Block teleport or position reset protections by ignoring suspicious CFrame sets
        if method == "FireServer" and tostring(self) == "HumanoidRootPart" then
            if args[1] and typeof(args[1]) == "CFrame" then
                -- Example heuristic: prevent large sudden teleport
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    local hrp = char.HumanoidRootPart
                    local dist = (args[1].p - hrp.Position).Magnitude
                    if dist > 50 then
                        notify("[AntiTP] Blocked suspicious teleport attempt.")
                        return
                    end
                end
            end
        end

        return oldNamecall(self, ...)
    end)
    setreadonly(mt, true)
    kickHooked = true
    notify("[Anticheat Bypass] Hooks applied.")
end

DebuggerTab:CreateToggle({
    Name = "Anticheat Bypasser (Adaptive)",
    CurrentValue = false,
    Callback = function(enabled)
        anticheatBypassEnabled = enabled
        if enabled then
            hookKick()
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                originalPosition = char.HumanoidRootPart.CFrame
            end

            if positionRestoreConnection then positionRestoreConnection:Disconnect() end
            positionRestoreConnection = RunService.Heartbeat:Connect(function()
                if not anticheatBypassEnabled then return end
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") and originalPosition then
                    local hrp = char.HumanoidRootPart
                    local dist = (hrp.Position - originalPosition.Position).Magnitude
                    if dist > 60 then -- increased threshold
                        notify("[AntiTP] Restoring position to prevent detection.")
                        hrp.CFrame = originalPosition
                    else
                        originalPosition = hrp.CFrame
                    end
                end
            end)

            StarterGui:SetCore("ResetButtonCallback", false)
            notify("Anticheat Bypasser Enabled")
        else
            if positionRestoreConnection then
                positionRestoreConnection:Disconnect()
                positionRestoreConnection = nil
            end
            StarterGui:SetCore("ResetButtonCallback", true)
            notify("Anticheat Bypasser Disabled")
        end
    end
})

-- Optimized Remote Call Logger --
local remoteCallLogCache = {}
local function isRemoteSuspicious(remoteName, args)
    -- Example heuristics:
    -- Flag remote names with suspicious keywords or unusual argument count/types
    local suspiciousKeywords = {"kick", "ban", "admin", "shutdown", "lock"}
    local lowerName = remoteName:lower()
    for _, keyword in ipairs(suspiciousKeywords) do
        if string.find(lowerName, keyword) then
            return true, "Suspicious name"
        end
    end

    if #args > 5 then
        return true, "Too many args"
    end

    return false
end

DebuggerTab:CreateToggle({
    Name = "Smart Remote Calls Logger",
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            remoteLoggerConnection = RunService.Stepped:Connect(function()
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                        local name = obj.Name
                        -- Avoid spamming: log once per remote per second max
                        if not remoteCallLogCache[obj] or (tick() - remoteCallLogCache[obj]) > 1 then
                            remoteCallLogCache[obj] = tick()
                            -- Try to hook FireServer for RemoteEvents to intercept calls
                            if obj:IsA("RemoteEvent") then
                                local mt = getrawmetatable(obj)
                                setreadonly(mt, false)
                                local oldFireServer = obj.FireServer
                                obj.FireServer = function(self, ...)
                                    local args = {...}
                                    local suspicious, reason = isRemoteSuspicious(name, args)
                                    if suspicious then
                                        print(("[RemoteEvent] %s called with suspicious args (%s)"):format(name, reason))
                                    else
                                        print("[RemoteEvent] " .. name .. " called")
                                    end
                                    return oldFireServer(self, ...)
                                end
                                setreadonly(mt, true)
                            end
                        end
                    end
                end
            end)
            notify("Smart Remote Calls Logger Enabled")
        else
            if remoteLoggerConnection then
                remoteLoggerConnection:Disconnect()
                remoteLoggerConnection = nil
            end
            notify("Smart Remote Calls Logger Disabled")
        end
    end
})

-- Auto Respawn (Improved with event hooks) --
DebuggerTab:CreateToggle({
    Name = "Auto Respawn (Reliable)",
    CurrentValue = false,
    Callback = function(enabled)
        autoRespawnEnabled = enabled
        if enabled then
            spawn(function()
                while autoRespawnEnabled do
                    local char = LocalPlayer.Character
                    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
                    if not char or (humanoid and humanoid.Health <= 0) then
                        LocalPlayer:LoadCharacter()
                        notify("[Auto Respawn] Character respawned.")
                        task.wait(1) -- small cooldown before checking again
                    end
                    task.wait(0.5)
                end
            end)
        else
            notify("[Auto Respawn] Disabled.")
        end
    end
})

-- Advanced Command Logger --
local function hookChatCommands()
    if chatLoggerConnection then chatLoggerConnection:Disconnect() chatLoggerConnection = nil end
    chatLoggerConnection = Players.PlayerChatted:Connect(function(player, message)
        if player == LocalPlayer then
            print(("[Chat Command] You typed: %s"):format(message))
        else
            print(("[Chat Command] %s said: %s"):format(player.Name, message))
        end
        -- Simple command detection (starts with ! or /)
        if message:sub(1,1) == "!" or message:sub(1,1) == "/" then
            notify("[Command Logger] Command detected: " .. message)
        end
    end)
end

DebuggerTab:CreateToggle({
    Name = "Command Logger (Chat & Remote)",
    CurrentValue = false,
    Callback = function(enabled)
        commandLoggerEnabled = enabled
        if enabled then
            hookChatCommands()
            notify("Command Logger Enabled")
        else
            if chatLoggerConnection then
                chatLoggerConnection:Disconnect()
                chatLoggerConnection = nil
            end
            notify("Command Logger Disabled")
        end
    end
})

-- Infinite Jump Debugging (same)
local infJumpDebugEnabled = false
DebuggerTab:CreateToggle({
    Name = "Infinite Jump Debug",
    CurrentValue = false,
    Callback = function(enabled)
        infJumpDebugEnabled = enabled
        notify("Infinite Jump Debug " .. (enabled and "Enabled" or "Disabled"))
    end
})

UserInputService.JumpRequest:Connect(function()
    if infJumpDebugEnabled then
        print("[Nebula Debugger] Jump Press Detected")
    end
end)

-- Dynamic Admin Detection & Interaction --
local knownAdmins = {
    {Name = "Kohl's Admin", GuiNames = {"KohlAdmin", "KohlAdminGui"}, TryOpen = function()
        local gui = CoreGui:FindFirstChild("KohlAdmin") or CoreGui:FindFirstChild("KohlAdminGui")
        if gui then
            gui.Enabled = true
            return true
        end
        return false
    end},
    {Name = "Adonis Admin", GuiNames = {"Adonis", "AdonisAdmin"}, TryOpen = function()
        local gui = CoreGui:FindFirstChild("Adonis") or CoreGui:FindFirstChild("AdonisAdmin")
        if gui then
            gui.Enabled = true
            return true
        end
        return false
    end},
    {Name = "HD Admin", GuiNames = {"HDAdmin"}, TryOpen = function()
        local gui = workspace:FindFirstChild("HDAdmin") or CoreGui:FindFirstChild("HDAdmin")
        if gui then
            gui.Enabled = true
            return true
        end
        return false
    end},
    {Name = "CMD-X", GuiNames = {"CmdXGui"}, TryOpen = function()
        local gui = CoreGui:FindFirstChild("CmdXGui")
        if gui then
            gui.Enabled = true
            return true
        end
        return false
    end},
    {Name = "Owl Admin", GuiNames = {"OwlAdmin"}, TryOpen = function()
        local gui = CoreGui:FindFirstChild("OwlAdmin")
        if gui then
            gui.Enabled = true
            return true
        end
        return false
    end}
}

local function scanAndTryGetAdmin()
    notify("Scanning for admin panels...")
    local foundAny = false
    for _, admin in ipairs(knownAdmins) do
        for _, guiName in ipairs(admin.GuiNames) do
            local gui = CoreGui:FindFirstChild(guiName) or workspace:FindFirstChild(guiName)
            if gui then
                print(("[Admin Detector] Found %s GUI: %s"):format(admin.Name, guiName))
                foundAny = true
                local success, opened = pcall(admin.TryOpen)
                if success and opened then
                    notify("[Admin Detector] Opened " .. admin.Name .. " GUI.")
                else
                    notify("[Admin Detector] Failed to open " .. admin.Name .. " GUI.")
                end
                -- Attempt commands if possible
                -- Example: Try to send a common command if exposed, or trigger click on buttons
                -- This part depends heavily on the specific admin GUI structure,
                -- so here we just log detection and opening for safety
            end
        end
    end
    if not foundAny then
        notify("No known admin panels found.")
        print("[Admin Detector] No known admin panels found.")
    end
end

DebuggerTab:CreateButton({
    Name = "Detect & Try Get Admin",
    Callback = scanAndTryGetAdmin
})

-- Server Info button (optional)
DebuggerTab:CreateButton({
    Name = "Log Server Info",
    Callback = function()
        print("===== Server Info =====")
        print("PlaceId:", game.PlaceId)
        print("JobId:", game.JobId)
        local sss = game:GetService("ServerScriptService")
        local ss = game:GetService("ServerStorage")

        print("ServerScriptService Contents:")
        for _, v in pairs(sss:GetChildren()) do
            print(" - " .. v.Name .. " (" .. v.ClassName .. ")")
        end
        print("ServerStorage Contents:")
        for _, v in pairs(ss:GetChildren()) do
            print(" - " .. v.Name .. " (" .. v.ClassName .. ")")
        end
    end
})

-- Ready notification
notify("Nebula Debugger Ultra Advanced Loaded")

